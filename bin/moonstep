#!/usr/bin/env moon

import decode from require'moonstep.luadec.reader'
vm = require'moonstep.vm'
inspect = require'inspect'
toint = math.tointeger

switchmatch = (str, t) ->
	for i = 1, #t, 2
		unless (type(t[i]) == "string") or type(t[i + 1]) == "function"
			error "switchmatch failed"

		matches = {str\match t[i]}
		if #matches > 0
			return t[i + 1] unpack matches

	t.default! if t.default

local filename

a, b, c = unpack do
	filename = arg[1] or "luac.out"
	f = assert (io.open filename), "Failed to open #{filename} No such file or directory"
	with {decode f}
		f\close!

src = {
	pc: 1
	reg: {}
}

local bp
vmco = vm c, src
flag = true

while flag
	vmstatus = -> coroutine.status vmco

	disp = vmstatus! == "dead" and "(dead)" or toint src.pc

	io.write "[#{disp}]> "

	line = io.read!

	unless line then break

	switchmatch line, {
		"^bp%s+(%d+)%s*$", (pc) ->
			bp = toint pc
		"^r%s*$", ->
			while vmstatus! ~= "dead"
				if bp and bp == src.pc
					print "breakpoint #{bp}"
					break
				coroutine.resume vmco

			if vmstatus! == "dead"
				print "[#{filename}: exited program]"
		"^n%s*$", ->
			if vmstatus! == "dead"
				print "[#{filename}: exited program]"
			else coroutine.resume vmco
		"^d", -> print inspect src
		"^q%s*$", -> flag = false
		"^%s*$", ->
		default: ->
			io.write "command:\n",
				"\tbp <pc>: set a breakpoint to <pc>\n",
				"\tr: run the code. if the breakpoint is set, stop at <pc>\n",
				"\tn: execute the next instruction\n",
				"\td: dump the current register and PC\n",
				"\tq: quit\n"
	}

